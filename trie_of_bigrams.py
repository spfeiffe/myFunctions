from nltk.corpus import brown
import numpy
from timeit import default_timer as timer

### begin code generated by Microsoft Copilot
class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end_of_word = False

class Trie:
    def __init__(self):
        self.root = TrieNode()
    #
    def insert(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]
        node.is_end_of_word = True
    #
    def search(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                return False
            node = node.children[char]
        return node.is_end_of_word
    #
    def starts_with(self, prefix):
        node = self.root
        for char in prefix:
            if char not in node.children:
                return False
            node = node.children[char]
        return True

# Example Usage
# trie = Trie()
# trie.insert("apple")
# trie.insert("apex")
# print(trie.search("apple"))  # True
# print(trie.search("app"))    # False
# print(trie.starts_with("app"))  # True (Prefix exists)

### End of code provided by Microsoft Copilot

w = [item for item in brown.words()] # len = 1161192.

trie_of_bigrams = Trie()

bigram_counter = 0

start = timer()

for i in range(len(w)-1):
    this_bigram = w[i] + " " + w[i+1]
    if not trie_of_bigrams.search(this_bigram):
        trie_of_bigrams.insert(this_bigram)
        bigram_counter += 1

end = timer()

print("Took " + str(round(end-start)) + " seconds.")
print("bigram_counter = " + str(bigram_counter) + ".")
# Takes only a quarter of a millisecond per unique bigram!
